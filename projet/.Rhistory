# ==================================================================================
# 3/  Calculate the percentage of variance explained (PVE) by each component?
#Plot the PVE explained by each component, as well as the cumulative PVE.
#How many components would you keep? Why?
# ==================================================================================
# Summary + PVE + cumultative PVE
pca_summary_info <-summary(pca_result)
pca_summary_info
# Calcul : pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- round(pca_summary_info$importance[2,] * 100, digits=2)
cpve <- round(pca_summary_info$importance[3,]*100, digits=2)
# Graphs
plot(pve,
xlab = "PC",
ylab="PVE (%)", ylim=c(0,100),
type="b", col = "blue")
text(x=1:length(pve), y= pve, labels=paste(pve," %"), pos=3, col="blue")
plot(cumsum(pve),
xlab="PC",
ylab="Cumulative PVE (%)", ylim=c(0,100),
type="b", col = "red")
text(x=1:length(pve), y= cpve, labels=paste(cpve," %"), pos=1, col="red")
PC1_2 <- pca_result$rotation[,1:2] # PC1-2 loading vectors
# ==================================================================================
# 3/  Calculate the percentage of variance explained (PVE) by each component?
#Plot the PVE explained by each component, as well as the cumulative PVE.
#How many components would you keep? Why?
# ==================================================================================
# Summary + PVE + cumultative PVE
pca_summary_info <-summary(pca_result)
pca_summary_info
# Calcul : pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- round(pca_summary_info$importance[2,] * 100, digits=2)
cpve <- round(pca_summary_info$importance[3,]*100, digits=2)
# Graphs
plot(pve,
xlab = "PC",
ylab="PVE (%)", ylim=c(0,100),
type="b", col = "blue")
text(x=1:length(pve), y= pve, labels=paste(pve," %"), pos=3, col="blue")
plot(cumsum(pve),
xlab="PC",
ylab="Cumulative PVE (%)", ylim=c(0,100),
type="b", col = "red")
text(x=1:length(pve), y= cpve, labels=paste(cpve," %"), pos=1, col="red")
# 2nd Way : make graph better
library(ggplot2) #install.packages('ggplot2')
library(ggforce) #install.packages('ggforce')
plotdata <- as.data.frame(pca_result$x[,1:2]) #  PC1/PC2's data
plotdata$abalone <- rownames(plotdata)  # add names
rotdata <- as.data.frame(pca_result$rotation[,1:2]) # PC1/PC2's rotation
rotdata$variables <- rownames(rotdata) # add names
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_text(data = plotdata, aes(x = PC1, y = PC2, label = abalone), size = 3) + # data
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') + # add vector names
geom_circle(aes(x0=0, y0=0, r=7), color="blue", linewidth=1)
# **********************************************************************************
# ******************       Part 3 : Linear Regression        ***********************
# **********************************************************************************
# new column : age = 1.5 + Card(rings)
data$age <-1.5+data$Rings
# ==================================================================================
# SIMPLE REGRESSION
# ==================================================================================
# Calculate correlation coefficient : r --------------------------------------------
all_r <- data[, !names(data) %in% c('Rings','Sex')] # remove ring column
all_r <- data.frame(cor(all_r))   # get all coefficient
r_age <- all_r$age[1:length(all_r)-1] # obtain data
r_age
# Graph to analyze ----------------------------------------------------------------
r_barplot <- barplot(r_age, names.arg = rownames(all_r)[1:length(all_r)-1],
main="correlation coefficient between Age and each of the other variables",
xlab="variables", ylab="coefficient")
text(x = r_barplot, y=r_age, label=round(r_age, digits=2),pos=1 )
# Fit the Simple Regression Linear model ----------------------------------------
Y <- data$age    # target variable
X <- data$Shell.weight  # feature (most correlated)
model_simple <- lm(Y ~ X)  # model
summary(model_simple) # description
# get coefficient estimate : Y = beta1 * X + beta0 + eps -------------------------
coefficients <- coef(model_simple)
beta0 <- coefficients[1] # intercep or b in (Y = aX+b) [the starting point in y axis]
beta1 <- coefficients[2] # slope or a in (Y = aX+b)  [pente]
beta1 # >0 so proportional between X and Y
plot(x=X,y=Y)
abline(model_simple,col="red")
coefficients
cov(X,Y)
var(X)
cov(X,Y)/var(X)
beta1 # >0 so proportional between X and Y
beta0
beta1
# 95% Confidence Interval -------------------------------------------------------
se_beta1 <- summary(model_simple)$coefficients["X","Std. Error"]
se_beta1
summary(model_simple) # description
View(model_simple)
se_beta1
summary(model_simple)$coefficients
help(qt)
critical_value <- qt(0.95)
critical_value <- qt(0.9, df=Inf)
critical_value <- qt(0.9, df=df)
df <- model_simple$df.residual
critical_value <- qt(0.9, df=df)
critical_value <- qt(0.9, df=df)
critical_value <- qt(0.9, df=Inf)
critical_value <- qt(0.9, df=df)
margin_err <- critical_value * se_beta1
critical_value <- qt(1-alpha/2, df=df) # t_alpha/2
alpha <- 0.05
df <- model_simple$df.residual # degree of freedom
critical_value <- qt(1-alpha/2, df=df) # t_alpha/2
margin_err <- critical_value * se_beta1 #
# 95% Confidence Interval -------------------------------------------------------
se_beta1 <- summary(model_simple)$coefficients["X","Std. Error"] # standard error of beta1
alpha <- 0.05
df <- model_simple$df.residual # degree of freedom
critical_value <- qt(1-alpha/2, df=df) # t_alpha/2
margin_err <- critical_value * se_beta1 #
interval <- c(beta1 - margin_err, beta1 + margin_err)
interval
interval95% <- c(beta1 - margin_err, beta1 + margin_err)
interval_95 <- c(beta1 - margin_err, beta1 + margin_err)
interval_95
# zero slope hypothesis test ----------------------------------------------------
t <- beta1 / se_beta1
t
# zero slope hypothesis test ----------------------------------------------------
t_stat <- beta1 / se_beta1 # t-statistic
t_stat
p <-2*pt(abs(t_stat), df, lower.tail = FALSE)
P
p
p <-2*pt(abs(t_stat), df, lower.tail = FALSE)
p
# coefficient of determination R^2
r_age
# coefficient of determination R^2
all_r
# coefficient of determination R^2
all_r["Shucked.weight","age"]
# coefficient of determination R^2
all_r["Shell.weight","age"]
# coefficient of determination R^2
R2 <- all_r["Shell.weight","age"]^2
R2
# coefficient of determination R^2
R2 <- round( all_r["Shell.weight","age"]^2, digits=2Ã )
R2
# coefficient of determination R^2
R2 <- round( all_r["Shell.weight","age"]^2, digits=2)
R2
help(regsubsets)
data[,2:length(data)]
data[,1:length(data)]
regsubsets(age ~ ., data=data[,2:length(data)], nvmax=1)
install.packages(leaps)
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=1)
# ==================================================================================
# MULTIPLE LINEAIR REGRESSION
# ==================================================================================
# 1 best subset selection --------------------------------------------
library(leaps)
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=1)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=2)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=3)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=4)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
View(subset_model)
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=1)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
data[,2:length(data)]
age
data[,2:length(data)-1]
subset_model <- regsubsets(data$age ~ ., data=data[,2:length(data)-1], nvmax=1)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(data$age ~ ., data=data[,2:length(data)-1], nvmax=2)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(data$age ~ ., data=data[,2:length(data)-1], nvmax=2)
adj_R2 <- summary(subset_model)$adjr2
data[,2:length(data)-1]
C <- data[,2:length(data)-1]
View(C)
C <- data[,2:length(data)-1]
C <- data[,1:length(data)-1]
C <- data[,3:length(data)-1]
subset_model <- regsubsets(data$age ~ ., data=data[,3:length(data)-1], nvmax=1)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(data$age ~ ., data=data[,3:length(data)-1], nvmax=2)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
View(numeric_data)
subset_model <- regsubsets(data$age ~ ., data=numeric_data, nvmax=2)
summary(subset_model)
subset_model <- regsubsets(data$age ~ ., data=numeric_data, nvmax=1)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(data$age ~ ., data=numeric_data, nvmax=4)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
pca_result
subset_model <- regsubsets(data$age ~ ., data=numeric_data, nvmax=8)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(data$age ~ ., data=numeric_data, nvmax=1)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
# ==================================================================================
# MULTIPLE LINEAIR REGRESSION
# ==================================================================================
# 1 best subset selection --------------------------------------------
pca_components <-pca_result$x[,1:2]
pca_components
new_data <- as.data.frame(pca_components)
View(new_data)
subset_model <- regsubsets(data$age ~ ., data=numeric_data, nvmax=1)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
# **********************************************************************************
# ***********           Part 1 : Preliminary analysis       ************************
# **********************************************************************************
# Load dataset
data <- read.csv("./abalone_data.csv",sep=",")
# ==================================================================================
# 1/ how many observations abalones are described ? How many variables are there ?
# ==================================================================================
# numbers of observations abalones
len <- nrow(data) -1
# ==================================================================================
# 1/ Varianc of each variable  +  interpret + need Standardize before PCA?
# ==================================================================================
# Numeric data
numeric_data <- data[,2:length(data_variables)]
# ==================================================================================
# SIMPLE LINEAR REGRESSION
# ==================================================================================
# Calculate correlation coefficient : r --------------------------------------------
all_r <- data[, !names(data) %in% c('Rings','Sex')] # remove ring column
all_r <- data.frame(cor(all_r))   # get all coefficient
r_age <- all_r$age[1:length(all_r)-1] # obtain data
r_age
# Graph to analyze ----------------------------------------------------------------
r_barplot <- barplot(r_age, names.arg = rownames(all_r)[1:length(all_r)-1],
main="correlation coefficient between Age and each of the other variables",
xlab="variables", ylab="coefficient")
text(x = r_barplot, y=r_age, label=round(r_age, digits=2),pos=1 )
# Fit the Simple Regression Linear model ----------------------------------------
Y <- data$age    # target variable
X <- data$Shell.weight  # feature (most correlated)
model_simple <- lm(Y ~ X)  # model
summary(model_simple) # description
# **********************************************************************************
# ***********           Part 1 : Preliminary analysis       ************************
# **********************************************************************************
# Load dataset
data <- read.csv("./abalone_data.csv",sep=",")
# ==================================================================================
# 1/ Varianc of each variable  +  interpret + need Standardize before PCA?
# ==================================================================================
# Numeric data
numeric_data <- data[,2:length(data_variables)]
View(data)
# variables
data_variables <- colnames(data)
# ==================================================================================
# 1/ Varianc of each variable  +  interpret + need Standardize before PCA?
# ==================================================================================
# Numeric data
numeric_data <- data[,2:length(data_variables)]
View(numeric_data)
# **********************************************************************************
# ******************       Part 3 : Linear Regression        ***********************
# **********************************************************************************
# new column : age = 1.5 + Card(rings)
data$age <-1.5+data$Rings
# ==================================================================================
# MULTIPLE LINEAIR REGRESSION
# ==================================================================================
# 1 best subset selection --------------------------------------------
library(leaps)
subset_model <- regsubsets(data$age ~ ., data=numeric_data, nvmax=1)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(data$age ~ rings+Length, data=numeric_data, nvmax=2)
subset_model <- regsubsets(data$age ~ numeric_data$rings+numeric_data$Length, data=numeric_data, nvmax=2)
subset_model <- regsubsets(data$age ~ Rings+numeric_data$Length, data=numeric_data, nvmax=2)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(data$age ~ Rings+Length, data=numeric_data, nvmax=2)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
subset_model <- regsubsets(age ~ Rings+Length, data=numeric_data, nvmax=2)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(age ~ Rings+Length, data=data, nvmax=2)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
data[,2:length(data)]
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=2)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=2, method = "forward")
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=2, method = "exhaustive")
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
summary(subset_model)
adj_R2 <- summary(subset_model)
View(adj_R2)
is.na(data)
any(is.na(data))
sapply(data,var)
sapply(data[,2:length(data)],var)
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=2, method = "exhaustive")
summary(subset_model)
adj_R2 <- summary(subset_model)
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=2)
summary(subset_model)
adj_R2 <- summary(subset_model)
adj_R2
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=2)
# ==================================================================================
# MULTIPLE LINEAIR REGRESSION
# ==================================================================================
# 1 best subset selection --------------------------------------------
library(leaps)
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=2)
summary(subset_model)
adj_R2 <- summary(subset_model)
adj_R2 <- summary(subset_model)
View(adj_R2)
subset_model <- regsubsets(age ~ Length+Diameter+Height+Whole.weight+Shucked.weight+Viscera.weight+Shell.weight+Rings,
data=datA, nvmax=2)
subset_model <- regsubsets(age ~ Length+Diameter+Height+Whole.weight+Shucked.weight+Viscera.weight+Shell.weight+Rings,
data=data, nvmax=2)
adj_R2 <- summary(subset_model)
adj_R2
adj_R2 <- summary(subset_model)
adj_R2
subset_model <- regsubsets(age ~ Length+Diameter+Height+Whole.weight+Shucked.weight+Viscera.weight+Shell.weight+Rings,
data=data, nvmax=2)
adj_R2 <- summary(subset_model)$adjr2
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(age ~ Length+Diameter+Height+Whole.weight+Shucked.weight+Viscera.weight+Shell.weight+Rings,
data=data, nvmax=2)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=4)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
# ---------------------------------------------------------------------------------
# Variances
vars <- round( sapply(numeric_data,var), digits=3 )
# ---------------------------------------------------------------------------------
# interpretation
var_sd <- round( sd(vars), digits = 2)
# ==================================================================================
# 2/  Perform PCA using the appropriate function with the appropriate arguments
# and options considering your answer to the previous question.
# Analyze the output of the function.
# Interpret the values of the two first principal component loading vectors.
# ==================================================================================
# Standardize dataset + Perform PCA
pca_result <- prcomp(numeric_data, scale. = TRUE)
pca_result
View(pca_result)
pca_result$x
pca_result$rotation
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=4)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
data=data[,2:length(data)]
data[,2:length(data)]
subset_model <- regsubsets(x=age, y=data[,3:length(data)-1], nvmax=4)
subset_model <- regsubsets(x=data$age, y=data[,3:length(data)-1], nvmax=4)
subset_model <- regsubsets(x=data[,3:length(data)-1], y=data$age, nvmax=4)
subset_model <- regsubsets(x=data[,3:length(data)-1], y=data$age, nvmax=4)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(x=data[,3:length(data)-1], y=data$age, nvmax=4,nbest=3)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(x=data[,3:length(data)-1], y=data$age, nvmax=4,nbest=1)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=4)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
# ==================================================================================
# SIMPLE LINEAR REGRESSION
# ==================================================================================
# Calculate correlation coefficient : r --------------------------------------------
all_r <- data[, !names(data) %in% c('Rings','Sex')] # remove ring column
all_r <- data.frame(cor(all_r))   # get all coefficient
View(all_r)
subset_model <- regsubsets(age ~ ., data=data[,2:length(data)], nvmax=4)
summary(subset_model)
adj_R2 <- summary(subset_model)$adjr2
adj_R2
plot(1:4, adj_R2, type = "b", xlab = "Number of Features", ylab = "Adjusted R^2", main = "Adjusted R^2 vs Number of Features")
barplot(1:4, adj_R2, type = "b", xlab = "Number of Features", ylab = "Adjusted R^2", main = "Adjusted R^2 vs Number of Features")
barplot( adj_R2, type = "b", xlab = "Number of Features", ylab = "Adjusted R^2", main = "Adjusted R^2 vs Number of Features")
plot(1:4, adj_R2, type = "b", xlab = "Number of Features", ylab = "Adjusted R^2", main = "Adjusted R^2 vs Number of Features")
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_point(data = plotdata, aes(x = PC1, y = PC2), size = 3) + # data represented as points
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') + # add vector names
geom_circle(aes(x0=0, y0=0, r=7), color="blue", linewidth=1)
plotdata <- as.data.frame(pca_result$x[,1:2]) #  PC1/PC2's data
plotdata$abalone <- rownames(plotdata)  # add names
rotdata <- as.data.frame(pca_result$rotation[,1:2]) # PC1/PC2's rotation
rotdata$variables <- rownames(rotdata) # add names
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_point(data = plotdata, aes(x = PC1, y = PC2), size = 3) + # data represented as points
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') + # add vector names
geom_circle(aes(x0=0, y0=0, r=7), color="blue", linewidth=1)
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_point(data = plotdata, aes(x = PC1, y = PC2), size = 1) + # data represented as points
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') + # add vector names
geom_circle(aes(x0=0, y0=0, r=7), color="blue", linewidth=1)
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_point(data = plotdata, aes(x = PC1, y = PC2), size = 2) + # data represented as points
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') + # add vector names
geom_circle(aes(x0=0, y0=0, r=7), color="blue", linewidth=1)
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_point(data = plotdata, aes(x = PC1, y = PC2), size = 2) + # data represented as points
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') + # add vector names
geom_circle(aes(x0=0, y0=0, r=7), color="blue", linewidth=1)
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_point(data = plotdata, aes(x = PC1, y = PC2), size = 1) + # data represented as points
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') + # add vector names
geom_circle(aes(x0=0, y0=0, r=7), color="blue", linewidth=1)
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_point(data = plotdata, aes(x = PC1, y = PC2), size = 1) + # data represented as points
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') + # add vector names
geom_circle(aes(x0=0, y0=0, r=7), color="blue", linewidth=1)
