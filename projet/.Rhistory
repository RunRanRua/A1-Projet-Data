geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_text(data = plotdata, aes(x = PC1, y = PC2, label = abalone), size = 3) + # data
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = crime), size = 4, colour = 'red') # names
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) +
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_text(data = plotdata, aes(x = PC1, y = PC2, label = abalone), size = 3) + # data
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') # names
plotdata <- as.data.frame(-pca_result$x[,1:2]) #  PC1/PC2's data
plotdata$abalone <- rownames(plotdata)  # add names
rotdata <- as.data.frame(-pca_result$rotation[,1:2]) # PC1/PC2's rotation
rotdata$variables <- rownames(rotdata) # add names
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) +
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_text(data = plotdata, aes(x = PC1, y = PC2, label = abalone), size = 3) + # data
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') # names
#install.packages('ggplot2')
#install.packages('ggforce')
#
plotdata <- as.data.frame(pca_result$x[,1:2]) #  PC1/PC2's data
plotdata$abalone <- rownames(plotdata)  # add names
rotdata <- as.data.frame(pca_result$rotation[,1:2]) # PC1/PC2's rotation
rotdata$variables <- rownames(rotdata) # add names
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) +
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_text(data = plotdata, aes(x = PC1, y = PC2, label = abalone), size = 3) + # data
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') # names
# Extract the standard deviations of the PCs
sd <- pca_result$sd
# Calculate the variance explained by each PC
var_explained <- sd^2
# Calculate the proportion of variance explained
proportion_var_explained <- var_explained / sum(variance_explained)
# Calculate the proportion of variance explained
proportion_var_explained <- var_explained / sum(var_explained)
# Convert to percentage
percentage_var_explained <- proportion_var_explained * 100
# View the percentage of variance explained by each PC
percentage_var_explained
# Calculate cumulative percentage of variance explained
cumul_percentage_var_explained <- cumsum(percentage_var_explained)
par(mfrow = c(2, 1))
barplot(percentage_var_explained, type = "o", main = "Percentage of Variance Explained by each PC",
xlab = "Principal Components", ylab = "Percentage of Variance Explained",
ylim = c(0, 100), col = "blue", pch = 16)
plot(cumul_percentage_var_explained, type = "o", main = "Cumulative Percentage of Variance Explained",
xlab = "Principal Components", ylab = "Cumulative Percentage of Variance Explained",
ylim = c(0, 100), col = "red", pch = 16)
pca_summary_info
pca_result$sdev^2
pca_result$sdev^2/sum(pca_result$sdev^2)
# ==================================================================================
# 3/  Calculate the percentage of variance explained (PVE) by each component?
#Plot the PVE explained by each component, as well as the cumulative PVE.
#How many components would you keep? Why?
# ==================================================================================
# Summary
pca_summary_info <-summary(pca_result)
pca_result$sdev^2/sum(pca_result$sdev^2)
# ==================================================================================
# 3/  Calculate the percentage of variance explained (PVE) by each component?
#Plot the PVE explained by each component, as well as the cumulative PVE.
#How many components would you keep? Why?
# ==================================================================================
# Summary
pca_summary_info <-summary(pca_result)
pca_summary_info
pca_result$sdev^2/sum(pca_result$sdev^2)
# pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- pca_summary_info[2,]
# pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- pca_summary_info[1,]
# pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- pca_summary_info[,2]
# pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- dim(pca_summary_info)
pve
# pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- pca_summary_info
pve
View(pve)
pca_summary_info
View(pca_summary_info)
# pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- pca_summary_info$importance
pve
# pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- pca_summary_info$importance
pve
rownames(pve)
# pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- pca_summary_info$importance[2]
pve
# pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- pca_summary_info$importance[2,]
pve
# pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- pca_summary_info$importance[2,] * 100
pve
# Graph : Analyze the output of the function
screeplot(pca_result, type="lines", main="Scree Plot")
# ==================================================================================
# 2/  Perform PCA using the appropriate function with the appropriate arguments
#and options considering your answer to the previous question. Analyze the output of the function.
#Interpret the values of the two first principal component loading vectors.
# ==================================================================================
# Standardise dataset + Perform PCA
pca_result <- prcomp(numeric_data, scale. = TRUE)
# Graph : Analyze the output of the function
screeplot(pca_result, type="lines", main="Scree Plot")
# Graph : Analyze the output of the function
screeplot(pca_result, type="lines", main="Scree Plot")
# Graph : Analyze the output of the function
screeplot(pca_result, type="lines", main="Scree Plot")
# ==================================================================================
# 2/  Perform PCA using the appropriate function with the appropriate arguments
#and options considering your answer to the previous question. Analyze the output of the function.
#Interpret the values of the two first principal component loading vectors.
# ==================================================================================
# Standardise dataset + Perform PCA
pca_result <- prcomp(numeric_data, scale. = TRUE)
# Graph : Analyze the output of the function
screeplot(pca_result, type="lines", main="Scree Plot")
# Graph : Analyze the output of the function
screeplot(pca_result, type="lines", main="Scree Plot")
plot(pve, xlab = "PC", ylab="PVE", ylim=c(0,1), type="b")
plot(pve, xlab = "PC", ylab="PVE", type="b")
# pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- pca_summary_info$importance[2,]
plot(pve, xlab = "PC", ylab="PVE", ylim=c(0,1), type="b")
# Graph : Analyze the output of the function
screeplot(pca_result, type="lines", main="Scree Plot")
plot(pve, xlab = "PC", ylab="PVE", ylim=c(0,1), type="b")
plot(cumsum(pve), xlab="PC", ylab="CPVE", ylim=c(0,1), type="b")
plot(pve, xlab = "PC", ylab="PVE", type="b")
# pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- pca_summary_info$importance[2,] * 100
plot(pve, xlab = "PC", ylab="PVE", type="b")
plot(pve, xlab = "PC", ylab="PVE", ylim=c(0,100), type="b")
plot(cumsum(pve), xlab="PC", ylab="CPVE", ylim=c(0,100), type="b")
barplot(percentage_var_explained, type = "o", main = "Percentage of Variance Explained by each PC",
xlab = "Principal Components", ylab = "Percentage of Variance Explained",
ylim = c(0, 100), col = "blue", pch = 16)
plot(cumul_percentage_var_explained, type = "o", main = "Cumulative Percentage of Variance Explained",
xlab = "Principal Components", ylab = "Cumulative Percentage of Variance Explained",
ylim = c(0, 100), col = "red", pch = 16)
par(mfrow = c(2, 1))
barplot(percentage_var_explained, type = "o", main = "PVE by each PC",
xlab = "Principal Components", ylab = "Percentage of Variance Explained",
ylim = c(0, 100), col = "blue", pch = 16)
plot(cumul_percentage_var_explained, type = "o", main = "Cumulative PVE",
xlab = "Principal Components", ylab = "Cumulative PVE",
ylim = c(0, 100), col = "red", pch = 16)
par(mfrow = c(2, 1))
barplot(percentage_var_explained, type = "o", main = "PVE by each PC",
xlab = "Principal Components", ylab = "Percentage of Variance Explained",
ylim = c(0, 100), col = "blue")
plot(cumul_percentage_var_explained, type = "o", main = "Cumulative PVE",
xlab = "Principal Components", ylab = "Cumulative PVE",
ylim = c(0, 100), col = "red")
par(mfrow = c(2, 1))
barplot(percentage_var_explained, type = "o", main = "PVE by each PC",
xlab = "Principal Components", ylab = "Percentage of Variance Explained",
ylim = c(0, 100), col = "blue")
plot(cumul_percentage_var_explained, type = "o", main = "Cumulative PVE",
xlab = "Principal Components", ylab = "Cumulative PVE",
ylim = c(0, 100), col = "red")
plot(pve, xlab = "Principal Components", ylab="PVE", ylim=c(0,100), type="b")
# graph
par(mfrow=c(1,1))
# pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- pca_summary_info$importance[2,] * 100
plot(pve, xlab = "Principal Components", ylab="PVE", ylim=c(0,100), type="b")
plot(cumsum(pve), xlab="Principal Components", ylab="Cumulative Percentage of Variance Explained", ylim=c(0,100), type="b")
barplot(percentage_var_explained, type = "o", main = "PVE by each PC",
xlab = "Principal Components", ylab = "Percentage of Variance Explained",
ylim = c(0, 100), col = "blue")
plot(cumul_percentage_var_explained, type = "o", main = "Cumulative PVE",
xlab = "Principal Components", ylab = "Cumulative PVE",
ylim = c(0, 100), col = "red")
barplot(pve, type = "o", main = "PVE by each PC",
xlab = "Principal Components", ylab = "Percentage of Variance Explained",
ylim = c(0, 100), col = "blue")
plot(pve, xlab = "Principal Components", ylab="PVE", ylim=c(0,100), type="b")
plot(pve, type = "o", main = "PVE by each PC",
xlab = "Principal Components", ylab = "Percentage of Variance Explained",
ylim = c(0, 100), col = "blue")
plot(cumsum(pve), type = "o", main = "Cumulative PVE",
xlab = "Principal Components", ylab = "Cumulative PVE",
ylim = c(0, 100), col = "red")
plot(cumsum(pve), main = "Cumulative PVE",
xlab = "Principal Components", ylab = "Cumulative PVE",
ylim = c(0, 100), col = "red")
plot(cumsum(pve),
xlab="Principal Components", ylab="Cumulative PVE",
ylim=c(0,100), type="b", col = "red")
plot(pve, xlab = "Principal Components", ylab="PVE", ylim=c(0,100), type="b")
plot(cumsum(pve), main = "Cumulative PVE",
xlab = "Principal Components", ylab = "Cumulative PVE",
ylim = c(0, 100), col = "red")
plot(pve, main = "PVE by each PC",
xlab = "Principal Components", ylab = "Percentage of Variance Explained",
ylim = c(0, 100), col = "blue")
plot(cumsum(pve), type = "o", main = "Cumulative PVE",
xlab = "Principal Components", ylab = "Cumulative PVE",
ylim = c(0, 100), col = "red")
plot(pve,
xlab = "Principal Components",
ylab="PVE", ylim=c(0,100),
type="b", col = "blue")
plot(cumsum(pve),
xlab="Principal Components",
ylab="Cumulative PVE", ylim=c(0,100),
type="b", col = "red")
# Graphes
plot(pve,
xlab = "PC",
ylab="PVE (%)", ylim=c(0,100),
type="b", col = "blue")
# Graphs
plot(pve,
xlab = "PC",
ylab="PVE (%)", ylim=c(0,100),
type="b", col = "blue")
plot(cumsum(pve),
xlab="PC",
ylab="Cumulative PVE (%)", ylim=c(0,100),
type="b", col = "red")
text(x=p, y= pve, label=pve)
# Graphs
p <- plot(pve,
xlab = "PC",
ylab="PVE (%)", ylim=c(0,100),
type="b", col = "blue")
text(x=p, y= pve, label=pve)
# Graphs
p <- plot(pve,
xlab = "PC",
ylab="PVE (%)", ylim=c(0,100),
type="b", col = "blue")
text(x=p, y= pve, labels=pve)
text(x=p, y= pve, labels=pve, pos=3, col="blue")
pve
text(x=1:length(pve), y= pve, labels=pve, pos=3, col="blue")
# Calcul : pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- round(pca_summary_info$importance[2,] * 100, digits=4)
pve
# Calcul : pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- round(pca_summary_info$importance[2,] * 100, digits=3)
pve
# Calcul : pve <- pca_result$sdev^2/sum(pca_result$sdev^2)
pve <- round(pca_summary_info$importance[2,] * 100, digits=2)
pve
# Graphs
p <- plot(pve,
xlab = "PC",
ylab="PVE (%)", ylim=c(0,100),
type="b", col = "blue")
text(x=1:length(pve), y= pve, labels=pve, pos=3, col="blue")
text(x=1:length(pve), y= pve, labels=paste(pve," %"), pos=3, col="blue")
# Graphs
p <- plot(pve,
xlab = "PC",
ylab="PVE (%)", ylim=c(0,100),
type="b", col = "blue")
text(x=1:length(pve), y= pve, labels=paste(pve," %"), pos=3, col="blue")
cpve <- round(pca_summary_info$importance[3,]*100, digits=2)
cpve
text(x=1:length(pve), y= cpve, labels=paste(cpve," %"), pos=3, col="blue")
plot(cumsum(pve),
xlab="PC",
ylab="Cumulative PVE (%)", ylim=c(0,100),
type="b", col = "red")
text(x=1:length(pve), y= cpve, labels=paste(cpve," %"), pos=3, col="red")
plot(cumsum(pve),
xlab="PC",
ylab="Cumulative PVE (%)",
type="b", col = "red")
plot(cumsum(pve),
xlab="PC",
ylab="Cumulative PVE (%)", ylim=c(0,100),
type="b", col = "red")
text(x=1:length(pve), y= cpve, labels=paste(cpve," %"), pos=3, col="red")
text(x=1:length(pve), y= cpve, labels=paste(cpve," %"), pos=1, col="red")
plot(cumsum(pve),
xlab="PC",
ylab="Cumulative PVE (%)", ylim=c(0,100),
type="b", col = "red")
text(x=1:length(pve), y= cpve, labels=paste(cpve," %"), pos=1, col="red")
# Graphs
p <- plot(pve,
xlab = "PC",
ylab="PVE (%)", ylim=c(0,100),
type="b", col = "blue")
text(x=1:length(pve), y= pve, labels=paste(pve," %"), pos=3, col="blue")
plot(cumsum(pve),
xlab="PC",
ylab="Cumulative PVE (%)", ylim=c(0,100),
type="b", col = "red")
text(x=1:length(pve), y= cpve, labels=paste(cpve," %"), pos=1, col="red")
# Plot : 2 first PC
# 1st Way
biplot(pca_result,scale=0)
install.packages("factoextra")
install.packages("factoextra")
library(factoextra)
library(factoextra)
# Create a basic biplot
biplot(pca_result, scale = 0, main = "PCA Biplot with Correlation Circle")
# Add a correlation circle
# Calculate the radius of the correlation circle
circle_radius <- sqrt(2)
# Draw the circle
symbols(0, 0, circles = circle_radius, inches = FALSE, add = TRUE, fg = "blue")
# Add axis lines
abline(h = 0, v = 0, col = "gray", lty = 2)
pca_result
View(pca_result)
names(pca_result)
rownames(pca_result)
Xstd = (X-matrix(rep(mean,4), nrow=4,byrow =T))/matrix(rep(sd,4),nrow=4,byrow=T)
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_text(data = plotdata, aes(x = PC1, y = PC2, label = abalone), size = 3) + # data
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') # add vector names
# Graph
# 1st Way
biplot(pca_result,scale=0)
# Draw the circle
symbols(0, 0, circles = circle_radius, inches = FALSE, add = TRUE, fg = "blue")
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_text(data = plotdata, aes(x = PC1, y = PC2, label = abalone), size = 3) + # data
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') + # add vector names
geom_circle(aes(x0=0, y0=0, r=3), color="blue", size=1)
# 2nd Way : make graph better
library(ggplot2) #install.packages('ggplot2')
library(ggforce) #install.packages('ggforce')
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_text(data = plotdata, aes(x = PC1, y = PC2, label = abalone), size = 3) + # data
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') + # add vector names
geom_circle(aes(x0=0, y0=0, r=3), color="blue", size=1)
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_text(data = plotdata, aes(x = PC1, y = PC2, label = abalone), size = 3) + # data
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') + # add vector names
geom_circle(aes(x0=0, y0=0, r=3), color="blue", linewidth=1)
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_text(data = plotdata, aes(x = PC1, y = PC2, label = abalone), size = 3) + # data
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') + # add vector names
geom_circle(aes(x0=0, y0=0, r=7), color="blue", linewidth=1)
# Graph
# 1st Way
biplot(pca_result,scale=0)
symbols(0, 0, circles = circle_radius, inches = FALSE, add = TRUE, fg = "blue")
symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
# ==================================================================================
# 4/  Use a biplot with a correlation circle to display both the principal component
#scores and the loading vectors in a single plot. Interpret the results.
# ==================================================================================
# Graph
# 1st Way
biplot(pca_result,scale=0)
symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
ggplot() +
theme_bw() + theme(panel.grid.major=element_line(colour=NA), panel.grid.minor = element_blank()) + # remove grid
geom_hline(aes(yintercept = 0), colour="gray88", linetype="dashed") + # horizontal line
geom_vline(aes(xintercept = 0), colour="gray88", linetype="dashed") + # vertical line
geom_text(data = plotdata, aes(x = PC1, y = PC2, label = abalone), size = 3) + # data
scale_y_continuous(sec.axis = sec_axis(~./6)) + scale_x_continuous(sec.axis = sec_axis(~./10)) + # 2nd axis
geom_segment(data = rotdata,aes(x=0, xend= PC1*10, y=0, yend= PC2*6), arrow = arrow(length = unit(0.03, "npc")), colour = 'red') +   # vectors
geom_text(data = rotdata, aes(x = PC1*10.4, y = PC2*6.4, label = variables), size = 4, colour = 'red') + # add vector names
geom_circle(aes(x0=0, y0=0, r=7), color="blue", linewidth=1)
plot(cumsum(pve),
xlab="PC",
ylab="Cumulative PVE (%)", ylim=c(0,100),
type="b", col = "red")
text(x=1:length(pve), y= cpve, labels=paste(cpve," %"), pos=1, col="red")
# Graphs
plot(pve,
xlab = "PC",
ylab="PVE (%)", ylim=c(0,100),
type="b", col = "blue")
text(x=1:length(pve), y= pve, labels=paste(pve," %"), pos=3, col="blue")
# ==================================================================================
# 3/  Calculate the percentage of variance explained (PVE) by each component?
#Plot the PVE explained by each component, as well as the cumulative PVE.
#How many components would you keep? Why?
# ==================================================================================
# Summary + PVE + cumultative PVE
pca_summary_info <-summary(pca_result)
pca_summary_info
names(pca_result)
pca_result$rotation[,1] # PC1
pca_result$rotation[,1:2] # PC1-2 loading vectors
ggplot()+
geom_point(as.data.frame(pca_result$rotation[,1:2]), aes(x=PC1, y=PC2), color="red")
pca_result$rotation[,1:2] # PC1-2 loading vectors
names(pca_result)
pca_result$sdev
pca_result
names(pca_result$x)
pca_result$x
pca_result$importance
pca_result$importances
pca_result
View(pca_result)
pca_result$rotation[,1:2] # PC1-2 loading vectors
p <- pca_result$rotation[,1:2] # PC1-2 loading vectors
View(p)
names(pca_result)
p <- pca_result$rotation[,1:2] # PC1-2 loading vectors
names(pca_result)
pca_result
# ==================================================================================
# 1/ Varianc of each variable  +  interpret + need Standardize before PCA?
# ==================================================================================
# Numeric data
numeric_data <- data[,2:length(data_variables)]
# ---------------------------------------------------------------------------------
# Variances
vars <- round( sapply(numeric_data,var), digits=3 )
# ---------------------------------------------------------------------------------
# General Graphic
par(mfrow=c(2,4))
for(i in 2:length(data_variables)){
mean_v <- mean(data[,i])
sd_v <- round(sd(data[,i]), digits=2)
boxplot(data[,i],
main= data_variables[i],
xlab= paste("sd =", sd_v, sep = " "),
col="lightblue")
abline(h=mean_v,  col = "red", lty = 2, lwd = 2) # mean line
}
# graph
par(mfrow=c(1,1))
barplot_vars <- barplot(vars, main = "Variances for each vairable",
xlab = "Variables", ylab = "Variance",
col = "skyblue", border = "white")
text(x=barplot_vars, y=vars, label=vars, pos=3, col="black")
legend("topleft",
legend=c(paste(names(vars),vars,sep=" : "), paste("standard deviation", var_sd, sep=" : ")),
title="result")
# ---------------------------------------------------------------------------------
# General Graphic
par(mfrow=c(2,4))
for(i in 2:length(data_variables)){
mean_v <- mean(data[,i])
sd_v <- round(sd(data[,i]), digits=2)
boxplot(data[,i],
main= data_variables[i],
xlab= paste("sd =", sd_v, sep = " "),
col="lightblue")
abline(h=mean_v,  col = "red", lty = 2, lwd = 2) # mean line
}
# Graphic with sex
par(mfrow=c(2,4))
for(i in 2:length(data_variables)){
means_sex <- tapply(data[,i], data$Sex, mean)
SDs_sex <- round( tapply(data[,i],data$Sex,sd), digits = 2)
boxplot(data[,i] ~ data$Sex,
main= data_variables[i],
xlab = paste(SDs_sex[1], SDs_sex[2], SDs_sex[3], sep = " | "),
col="lightblue")
# means
for(j in 1:length(means_sex)){
lines(c(j-0.5, j+0.5), c(means_sex[j], means_sex[j]), col = "red", lty = 2, lwd = 2)
}
}
# ==================================================================================
# 2/ Are there any missing values in the dataset ?
# ==================================================================================
has_missing_values <- any(is.na(data))
print( paste("missing values ? ", has_missing_values))
# variables
data_variables <- colnames(data)
print(data_variables)
